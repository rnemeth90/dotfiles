#!/bin/bash

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias cd..="cd .."

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

alias cp="cp -iv"
#             │└─ list copied files
#             └─ prompt before overwriting an existing file

alias mkdir="mkdir -pv"
#                   │└─ list created directories
#                   └─ create intermediate directories

alias mv="mv -iv"
#             │└─ list moved files
#             └─ prompt before overwriting an existing file


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

alias :q="exit"
alias q="exit"
alias c="clear"
alias d="cd ~/Desktop"
alias dt="cd ~/dotfiles"
alias doc="cd ~/Documents"
alias dow="cd ~/Downloads/"
alias g="git"
alias whatsmyip="dig +short myip.opendns.com @resolver1.opendns.com"
alias ll="ls -lh"
alias m="man"
alias t="tldr"
alias n="npm"
alias p="cd ~/projects"
alias y="yarn"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

alias empty-trash="rm -rf ~/.local/share/Trash/files/*"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Open from the terminal.
alias o="xdg-open"

alias mv='mv -i'
alias cp='cp -i'
alias rm='~/bin/new-rm.sh'
alias unrm='~/bin/unrm.sh'
alias nano='nano -ET2'

# python
alias python=python3

# Add some easy shortcuts for formatted directory listings and add a touch of color.
alias ll='ls -lisa --color'
alias la='ls -alF --color'
alias ls='ls -F'

# Make grep more user friendly by highlighting matches
# and exclude grepping through .svn folders.
alias grep='grep --color=auto --exclude-dir=\.svn'
alias ripgrep=rg

# Shortcut for using the Kdiff3 tool for svn diffs.
alias svnkdiff3='svn diff --diff-cmd kdiff3'

# nvim
alias n='nvim .'

# perf-tools
# inspired by https://github.com/orrsella/dotfiles/blob/master/bash/ssh/functions
perf-tools() {
  local reset="$(tput sgr0)"
  local bold="$(tput bold)"

  echo "Linux Performance Analysis in 60,000 Milliseconds
Source: http://techblog.netflix.com/2015/11/linux-performance-analysis-in-60s.html
Even more tools: http://techblog.netflix.com/2015/08/netflix-at-velocity-2015-linux.html

 1) ${bold}uptime${reset}              Load averages, indicate the number of tasks (processes) wanting to run (CPU and I/O).
 2) ${bold}dmesg | tail${reset}        Last 10 system messages (if there are any).
 3) ${bold}vmstat 1${reset}            Virtual memory stat, 1 second summaries. CPU stats are on average, across all CPUs:
                          - r          Number of processes running on CPU and waiting for a turn (CPU only, no I/O). Value > cores = saturation
                          - free       Free memory in kilobytes; see (7) for more info on free mem
                          - si/so      Swap-ins and swap-outs; if these are non-zero, you're out of memory
                          - us         User time
                          - sy         System time (kernel), necessary for I/O processing
                          - id         Idle
                          - wa         Wait I/O (like idle for I/O reason), constant value points to a disk bottleneck
                          - st         Stolen time
 4) ${bold}mpstat -P ALL 1${reset}     CPU time breakdowns per CPU, allows to check for an imbalance (a single hot CPU can be evidence of a single-threaded application).
 5) ${bold}pidstat 1${reset}           Per-process summary, useful for watching patterns over time. CPU column is the total across all CPUs (cores).
 6) ${bold}iostat -xz 1${reset}        Workload and performance of block devices:
                          - r/s        Reads per second
                          - w/s        Writes per second
                          - rkB/s      Read Kbytes per second
                          - wkB/s      Write Kbytes per second
                          - await      The average time for the I/O in milliseconds (time the application suffers, as it includes both time queued and time being serviced)
                          - avgqu-sz   The average number of requests issued to the device; values greater than 1 can be evidence of saturation
                          - %util      Device utilization during internal (1 second in this case)
 7) ${bold}free -m${reset}             Memory stats in Mbytes. Cached memory can be reclaimed quickly if apps need it, so it should be considered free (-/+ buffers/cache line). Also buffers and cached shouldn't be near-zero in size.
 8) ${bold}sar -n DEV 1${reset}        Network interface throughput:
                          - rxkB/s     Received Kbytes per second (x8 for Kbits)
                          - txkB/s     Transmitted Kbytes per second (x8 for Kbits)
                          - %ifutil    Device utilization (max of both directions for full duplex)
 9) ${bold}sar -n TCP,ETCP 1${reset}   Summarized view of some key TCP metrics:
                          - active/s   Number of locally-initiated TCP connections per second
                          - passive/s  Number of remotely-initiated TCP connections per second
                          - retrans/s  Number of TCP retransmits per second (sign of a network or server issue)
10) ${bold}top/htop${reset}            Non-rolling system overview (which makes it hard to see patterns over time). Pro-tip: Ctrl-S to pause, Ctrl-Q to continue."
}

